{"version":3,"sources":["components/Button/Button.js","components/Button/index.js","components/Input/Input.js","components/Input/index.js","tradeContext.js","components/ProfitInputs/ProfitInputs.js","components/ProfitInputs/index.js","components/Profit/Profit.js","components/Profit/index.js","components/FormOfTrade/FormOfTrade.js","components/FormOfTrade/index.js","App.js","store/reducers/tradrReducer.js","store/reducers/profitReducer.js","store/reducers/index.js","store/index.js","index.js"],"names":["Button","children","css","elClassName","hovered","disabled","onClick","attrs","classes","classNames","elStyles","backgroundColor","color","className","style","onMouseLeave","e","target","removeBgColor","onMouseOver","addBgColor","defaultProps","Input","React","forwardRef","ref","id","label","placeholder","error","required","marginLeft","TradeContext","createContext","as","ProfitInputs","data","deleteHandler","changeTotalProfit","useContext","availableFunds","action","useState","profit","profitInputVal","setProfitInputVal","amountToSell","amountInputVal","setAmountInputVal","tradePrice","setTradePrice","useEffect","fp","type","value","onInput","focusable","viewBox","d","addNewProfit","arr","arrayChangeHandler","uuid","length","newList","finalProfit","deleteProfit","idx","findIndex","item","slice","Profit","totalItems","isActive","setIsActive","profitsList","setProfitsList","setFinalProfit","total","i","defaultValue","pr","display","map","find","aria-hidden","FormOfTrade","actionType","setActionType","price","setPrice","amount","setAmount","setTotal","changeAction","actionName","Provider","width","height","fontSize","App","handlers","DEFAULT","state","initialState","traderReducer","handler","profitReducer","rootReducer","combineReducers","trade","store","createStore","composeWithDevTools","applyMiddleware","thunk","StoreProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5383009c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n//* import of components and developer packages\r\nimport './Button.scss';\r\n\r\nconst Button = ({children, css, elClassName, hovered, disabled, onClick, ...attrs}) => {\r\n    const classes = classNames('btn', (hovered && 'hovered'),elClassName);\r\n    const elStyles = !hovered ? {...css} : {...css, backgroundColor: null, color: css.backgroundColor || '#fff'};\r\n\r\n\r\n    const addBgColor = (hovered) => (e) => {\r\n        if(hovered){\r\n            e.target.style.backgroundColor = css.backgroundColor || 'green' || null;\r\n            e.target.style.color = '#fff';\r\n        }\r\n    }\r\n\r\n    const removeBgColor = (hovered) => (e) => {\r\n        if(hovered){\r\n            e.target.style.backgroundColor =  null;\r\n            e.target.style.color = css.backgroundColor || '#fff';\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <button className={classes}\r\n                disabled={disabled}\r\n                style={{...elStyles}}\r\n                onClick={onClick}\r\n                onMouseLeave={removeBgColor(hovered)}\r\n                onMouseOver={ addBgColor(hovered)}\r\n                {...attrs}>\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nButton.propTypes = {\r\n    children: PropTypes.string,\r\n    css: PropTypes.object,\r\n    elClassName: PropTypes.string,\r\n    hovered: PropTypes.bool,\r\n    disabled: PropTypes.bool,\r\n    onClick: PropTypes.func\r\n};\r\nButton.defaultProps = {\r\n    children: <></>,\r\n    css: {},\r\n    elClassName: '',\r\n    hovered: false,\r\n    disabled: false,\r\n    onClick: () => {}\r\n};\r\n\r\nexport default Button;","import Button from \"./Button\";\r\n\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport uuid from 'uuid-random';\r\n//* import of components and developer packages\r\nimport './Input.scss';\r\n\r\nconst Input = React.forwardRef(({id, elClassName, label, placeholder,  error, ...attrs}, ref) => {\r\n    const classes = classNames('input-wrapper', elClassName, (error && 'error'));\r\n\r\n    return (\r\n        <div className={classes} >\r\n            <label className='input__label'>\r\n                {label && <span className='label__text' >\r\n                    {label}\r\n                    {attrs.required && <span style={{color: 'red', marginLeft: '0.5em'}}>*</span>}\r\n                </span>}\r\n                <input ref={ref} {...attrs}/>\r\n            </label>\r\n            <span className='input__placeholder'>{placeholder}</span>\r\n            <span className='input__error'>{error}</span>\r\n        </div>\r\n    );\r\n});\r\n\r\nInput.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    elClassName: PropTypes.string,\r\n    label: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    error: PropTypes.string\r\n};\r\nInput.defaultProps = {\r\n    elClassName: '',\r\n    label: '',\r\n    placeholder: '',\r\n    error: ''\r\n};\r\n\r\nexport default Input;","import Input from \"./Input\";\r\n\r\n\r\nexport default Input;","import React from 'react';\r\n\r\n\r\n\r\nexport const TradeContext = React.createContext({as: 7});\r\n\r\n","import React, {useState, useContext, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n//* import of components and developer packages\r\nimport './ProfitInputs.scss';\r\nimport Input from \"../Input\";\r\nimport {TradeContext} from \"../../tradeContext\";\r\n\r\nconst ProfitInputs = ({data, deleteHandler, changeTotalProfit}) => {\r\n    const {availableFunds, action} = useContext(TradeContext);\r\n\r\n    const [profitInputVal, setProfitInputVal] = useState(data.profit);\r\n    const [amountInputVal, setAmountInputVal] = useState(data.amountToSell);\r\n    const [tradePrice, setTradePrice] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        if(profitInputVal > 0 && availableFunds > 0 ){\r\n            if(action === 'buy') setTradePrice(availableFunds * profitInputVal / 100 + availableFunds);\r\n            else if(action === 'sell') setTradePrice(availableFunds - (availableFunds * profitInputVal / 100 ));\r\n\r\n        }else setTradePrice(availableFunds);\r\n\r\n        if(profitInputVal > 0 && availableFunds > 0 && amountInputVal > 0){\r\n            const fp  = availableFunds * profitInputVal / 100 * amountInputVal / 100;\r\n            if(action === 'buy') changeTotalProfit(data.id, fp);\r\n            else if(action === 'sell')changeTotalProfit(data.id, -fp);\r\n        }else changeTotalProfit(data.id, 0);\r\n    }, [availableFunds, profitInputVal, amountInputVal, action])\r\n\r\n\r\n    useEffect(() => setAmountInputVal(data.amountToSell), [data.amountToSell])\r\n\r\n    return (\r\n        <div className=\"take-profit__inputs\">\r\n            <Input id={1} type='number' elClassName='profit' placeholder='%' value={profitInputVal}\r\n                   onInput={(e) => setProfitInputVal(e.target.value <= 100 ? e.target.value : 100)}/>\r\n            <div className='trade-price'><span>{tradePrice}</span> <span>USD</span></div>\r\n            <Input id={3} type='number'\r\n                   elClassName='amount-to-sell'\r\n                   placeholder='%'\r\n                   value={amountInputVal}\r\n                   onInput={(e) => setAmountInputVal(e.target.value <= 100 ? e.target.value : 100)} />\r\n            <div className=\"take-profit__cancel\">\r\n                <svg className=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" onClick={deleteHandler}>\r\n                    <path\r\n                        d=\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"></path>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nProfitInputs.propTypes = {\r\n    data: PropTypes.object,\r\n    deleteHandler: PropTypes.func,\r\n    changeTotalProfit: PropTypes.func\r\n};\r\nProfitInputs.defaultProps = {\r\n    data: {},\r\n    deleteHandler: () => {},\r\n    changeTotalProfit: () => {}\r\n};\r\n\r\nexport default ProfitInputs;","import ProfitInputs from \"./ProfitInputs\";\r\n\r\n\r\nexport default ProfitInputs;","import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport uuid from 'uuid-random';\r\n//* import of components and developer packages\r\nimport './Profit.scss';\r\nimport ProfitInputs from \"../ProfitInputs\";\r\n\r\nconst addNewProfit = (arr, arrayChangeHandler) => () => {\r\n    const id = uuid();\r\n    const profit = arr.length + 2 <= 100 && arr.length + 2;\r\n    let amountToSell = 20;\r\n\r\n    let newList = [...arr];\r\n\r\n    if (newList.length && newList[0].amountToSell > 30) newList[0].amountToSell = newList[0].amountToSell - 20;\r\n    if (!newList.length) amountToSell = 100;\r\n\r\n    newList[newList.length || 0] = {id, profit, tradePrice: 0, amountToSell, finalProfit: 0};\r\n    arrayChangeHandler([...newList]);\r\n}\r\n\r\nconst deleteProfit = (arr, arrayChangeHandler, id) => () => {\r\n    let newList = [...arr];\r\n    const idx = newList.findIndex(item => item.id === id);\r\n\r\n    if(idx > -1) {\r\n        if(idx === 0) newList = [...newList.slice(1)];\r\n        else newList = [...newList.slice(0, idx), ...newList.slice(idx + 1)];\r\n    }\r\n\r\n    arrayChangeHandler([...newList])\r\n}\r\n\r\nconst changeItemFinalProfit = (arr, arrayChangeHandler) => (id, finalProfit) => {\r\n    const newList = [...arr];\r\n    newList.find(item => {\r\n        if(item.id === id) item.finalProfit = finalProfit;\r\n    } )\r\n\r\n    arrayChangeHandler([...newList]);\r\n}\r\n\r\n\r\nconst Profit = ({ totalItems}) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [profitsList, setProfitsList] = useState([]);\r\n    const [finalProfit, setFinalProfit] = useState(0);\r\n\r\n    const classes = classNames('form__take-profit');\r\n\r\n    const switcher = () => () => setIsActive(pr => !pr);\r\n\r\n    useEffect(() => {\r\n        if(isActive && !profitsList.length) addNewProfit(profitsList, setProfitsList)();\r\n        else setProfitsList([]);\r\n    }, [isActive])\r\n\r\n    useEffect(() => !profitsList.length &&  setIsActive(false), [profitsList.length]);\r\n\r\n    useEffect(() => {\r\n        if(profitsList.length){\r\n            let total = 0;\r\n            for(let i = 0; i < profitsList.length; i++)total += profitsList[i].finalProfit;\r\n            setFinalProfit(total)\r\n        }\r\n    }, [profitsList])\r\n\r\n    return (\r\n        <div className={classes}>\r\n            <div className=\"take-profit__switch\">\r\n                <span>Take profit</span>\r\n                <label className='switch'>\r\n                    <input type='checkbox' defaultValue={false}/>\r\n                    <div className={`switch__toggle ${isActive && profitsList.length ? 'enable' : 'disable'}`} onClick={switcher()}/>\r\n                </label>\r\n            </div>\r\n\r\n            <div className=\"take-profit__content\" style={{display:  !profitsList.length ? 'none': null}}>\r\n                <div className=\"take-profit__titles\">\r\n                    <span>Profit</span>\r\n                    <span>Trade price</span>\r\n                    <span>Amount to sell</span>\r\n                </div>\r\n\r\n\r\n                {(profitsList && profitsList.length) ? profitsList.map((item) => (\r\n                    <ProfitInputs data={item}\r\n                                  changeTotalProfit={changeItemFinalProfit(profitsList, setProfitsList)}\r\n                                  deleteHandler={deleteProfit(profitsList, setProfitsList, item.id)}\r\n                                  key={item.id}/>\r\n                )) : ''}\r\n\r\n                {profitsList.length < totalItems && (\r\n                    <div className=\"add-item\">\r\n                        <button onClick={addNewProfit(profitsList, setProfitsList)}>\r\n                            <svg className=\"MuiSvgIcon-root take-profit__add-icon\" focusable=\"false\" viewBox=\"0 0 24 24\"\r\n                                 aria-hidden=\"true\">\r\n                                <path\r\n                                    d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"></path>\r\n                            </svg>\r\n                            <span>Add profit target {profitsList.length}/{totalItems}</span>\r\n                        </button>\r\n                    </div>\r\n                )}\r\n\r\n\r\n                <div className=\"take-profit__projected-profit\">\r\n                    <span>Projected profit</span>\r\n                    <span className='take-profit__projected-profit-value'>\r\n                        <span>{finalProfit} </span>\r\n                        <span>USD</span>\r\n                    </span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nProfit.propTypes = {totalItems: PropTypes.number,};\r\nProfit.defaultProps = {totalItems: 5,};\r\n\r\nexport default Profit;","import Profit from \"./Profit\";\r\n\r\n\r\nexport default Profit;","import React, {useState, useEffect, useMemo} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n//* import of components and developer packages\r\nimport './FormOfTrade.scss';\r\nimport Input from \"../Input\";\r\nimport Button from \"../Button\";\r\nimport Profit from \"../Profit\";\r\nimport {TradeContext} from \"../../tradeContext\";\r\n\r\n\r\nconst FormOfTrade = ({elClassName}) => {\r\n    const [actionType, setActionType] = useState('buy');\r\n    const [price, setPrice] = useState(0);\r\n    const [amount, setAmount] = useState(0);\r\n    const [total, setTotal] = useState(0);\r\n    const classes = classNames('form_trade', elClassName);\r\n\r\n    const changePrice = () => (e) => setPrice(e.target.value);\r\n    const changeAmount = () => (e) => setAmount(e.target.value);\r\n    const totalChange = () => (e) => {\r\n        if(price > 0 ) setAmount(e.target.value / price);\r\n        else setTotal(0);\r\n    }\r\n    const changeAction = (actionName) => () => {\r\n        if(actionName !== actionType) setActionType(actionName);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(amount > 0 && price > 0) setTotal(amount * price);\r\n        return 0;\r\n    }, [price, amount])\r\n\r\n\r\n    return (\r\n        <TradeContext.Provider value={{availableFunds: total, action: actionType}}>\r\n            <div className={classes}>\r\n                <div className=\"form__title\">Binance: BTC / USDT</div>\r\n\r\n                <div className=\"form__type-switch\">\r\n                    <Button css={{backgroundColor: '#4CAF50', width: '50%', height: '2.3em'}}\r\n                            onClick={changeAction('buy')}\r\n                            hovered={actionType !== 'buy' && true}>Buy</Button>\r\n                    <Button css={{backgroundColor: '#F44336', width: '50%', height: '2.3em'}}\r\n                            onClick={changeAction('sell')}\r\n                            hovered={actionType !== 'sell' && true}>Sell</Button>\r\n                </div>\r\n\r\n                <Input elClassName='form__price'\r\n                       label='Price'\r\n                       id='in-1'\r\n                       placeholder='USD'\r\n                       type='number'\r\n                       required\r\n                       value={price}\r\n                       onInput={changePrice()}/>\r\n                <Input elClassName='form__amount'\r\n                       label='Amount'\r\n                       id='in-2'\r\n                       placeholder='USD'\r\n                       type='number'\r\n                       required\r\n                       value={amount}\r\n                       onInput={changeAmount()}/>\r\n                <Input elClassName='form__total'\r\n                       label='Total'\r\n                       id='in-3'\r\n                       placeholder='USD'\r\n                       type='number'\r\n                       onInput={totalChange()}\r\n                       value={total}/>\r\n\r\n                <Profit totalItems={5} />\r\n\r\n                <div className=\"submit\">\r\n                    <Button css={{backgroundColor: '#4CAF50', width: '100%', height: '2.4em', fontSize: '1.1em'}}>By BTC</Button>\r\n                </div>\r\n            </div>\r\n        </TradeContext.Provider>\r\n    );\r\n};\r\n\r\nFormOfTrade.propTypes = {};\r\nFormOfTrade.defaultProps = {};\r\n\r\nexport default FormOfTrade;","import FormOfTrade from \"./FormOfTrade\";\r\n\r\n\r\nexport default FormOfTrade;","import React, {useState} from 'react';\r\nimport Button from \"./components/Button\";\r\nimport Input from \"./components/Input\";\r\nimport FormOfTrade from \"./components/FormOfTrade\";\r\n//* import of components and developer packages\r\n\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className='app'>\r\n            <FormOfTrade/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","\r\n\r\nconst handlers = {\r\n    DEFAULT: state => state,\r\n}\r\n\r\n// initial state\r\nconst initialState = {}\r\n// reducer function\r\nconst traderReducer = (state = initialState, action) => {\r\n    const handler = handlers[action.type] || handlers.DEFAULT;\r\n    return handler(state, action)\r\n}\r\n\r\n\r\nexport default traderReducer;","\r\n\r\nconst handlers = {\r\n    DEFAULT: state => state,\r\n}\r\n\r\n// initial state\r\nconst initialState = {}\r\n// reducer function\r\nconst profitReducer = (state = initialState, action) => {\r\n    const handler = handlers[action.type] || handlers.DEFAULT;\r\n    return handler(state, action)\r\n}\r\n\r\n\r\nexport default profitReducer;","import {combineReducers} from 'redux';\r\n//* import of components and developer packages\r\nimport traderReducer from \"./tradrReducer\";\r\nimport profitReducer from \"./profitReducer\";\r\n\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    trade: traderReducer,\r\n    profit: profitReducer\r\n});","import React from 'react';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n//* import of components and developer packages\r\nimport {rootReducer} from \"./reducers\";\r\n\r\n\r\n// app root store\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\n// store provider\r\nconst StoreProvider = ({children}) => (\r\n    <Provider store={store}>{children}</Provider>\r\n);\r\n\r\nexport {\r\n    StoreProvider\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n//* import of components and developer packages\nimport './index.scss';\nimport App from './App';\nimport {StoreProvider} from \"./store\";\n\nReactDOM.render(\n  <StoreProvider>\n      <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}